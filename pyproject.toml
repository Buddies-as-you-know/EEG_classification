[tool.poetry]
name = "pyresearch"
version = "0.1.0"
description = ""
authors = ["None"]
readme = "README.md"
packages = [
    { include = "src" },
    { include = "tests" },
]

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
boto3 = "^1.34.23"
wandb = "^0.16.2"
hydra-core = "^1.3.2"
jupyterlab = "^4.0.11"
bash = "^0.6"
moabb = "^1.0.0"
braindecode = "^0.8.1"
pandas = ">=1.5.2,<2.0.0"
numpy = "^1.26.3"
tqdm = "^4.66.1"
optuna = "^3.5.0"
scipy = "^1.11.4"
pyedflib = "^0.1.36"
torcheval = "^0.0.7"
coloredlogs = "^15.0.1"
torcheeg = "^1.1.1"
mspca = "^0.0.4"
torch = "2.1.1+cu118"
torchvision = "0.16.1+cu118"
torchaudio = "2.1.1+cu118"
pyg_lib = {path= "./wheels/pyg_lib-0.3.0+pt21cu118-cp310-cp310-linux_x86_64.whl"}
torch_scatter = {path= "./wheels/torch_scatter-2.1.2+pt21cu118-cp310-cp310-linux_x86_64.whl"}
torch_sparse = {path= "./wheels/torch_sparse-0.6.18+pt21cu118-cp310-cp310-linux_x86_64.whl"}
torch_cluster = {path= "./wheels/torch_cluster-1.6.2+pt21cu118-cp310-cp310-linux_x86_64.whl"}
torch_spline_conv = {path= "./wheels/torch_spline_conv-1.2.2+pt21cu118-cp310-cp310-linux_x86_64.whl"}
torch-geometric = "^2.4.0"

[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cu118"
priority = "supplemental"
[tool.poetry.group.dev.dependencies]
ruff = "^0.1.14"
mypy = "^1.8.0"
pytest = "^7.4.4"
pytest-env = "^1.1.3"
isort = "^5.13.2"
mdformat-gfm = "^0.3.5"
mdformat-frontmatter = "^2.0.1"
mdformat_footnote = "^0.1.1"
pytest-cov = "^4.0.0"
loguru = "^0.7.2"
pytest-loguru = "^0.3.0"

[tool.poetry.group.type.dependencies]
pydantic = "^2.5.3"
beartype = "^0.17.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
# エラー時のメッセージを詳細表示
show_error_context = true
# エラー発生箇所の行数/列数を表示
show_column_numbers = true
# import 先のチェックを行わない (デフォルトだとサードパーティーライブラリまでチェックする)
ignore_missing_imports = true
# 関数定義の引数/戻り値に型アノテーション必須
disallow_untyped_defs = true
# デフォルト引数に None を取る場合型アノテーションに Optional 必須
no_implicit_optional = true
# 戻り値が Any 型ではない関数の戻り値の型アノテーションが Any のとき警告
warn_return_any = true
# mypy エラーに該当しない箇所に `# type: ignore` コメントが付与されていたら警告
# ※ `# type: ignore` が付与されている箇所は mypy のエラーを無視出来る
warn_unused_ignores = true
# 冗長なキャストに警告
warn_redundant_casts = true

[tool.ruff]
exclude = [
    ".venv",
    "venv",
    "__pycache__",
    ".git",
]

line-length = 79
indent-width = 4


[tool.ruff.lint]
# PEP8のどのルールを対象に警告を出すか
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
ignore = [
]
fixable = ["ALL"]


[tool.ruff.format]
quote-style = "double"
docstring-code-format = true
[tool.ruff.lint.mccabe]
# if,forなどの複雑性をどれくらい許容するか。if,for文が11以上あると警告
# C901
max-complexity = 10
